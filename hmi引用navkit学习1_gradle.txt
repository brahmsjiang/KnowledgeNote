Jenkins服务器读取.jenkins：
node('linuxbuild_arp') {
	stage('Build') {startBuild(buildType, versionName)}
	stage('UnitTest') {...}
}
def startBuild(String buildType, String buildNumber) {
	sh """bash build.sh ${buildType} ${buildNumber} ${JAVA_HOME} ${NEXUS_USERNAME} ${NEXUS_PASSWORD}"""
}

调用build.sh脚本：
chmod +x ./gradlew
if [ $1 == "NI" ] || [ $1 == "RC" ];then
./gradlew :arp-sdk:assembleTasdkDebugAndroidTest updateLibVersion publishRelease -PbuildType=release -PversionName=$2 --info -Dorg.gradle.java.home=$3 -PnexusUsername=$4 -PnexusPassword=$5

执行gradlew（gradlwrapper也是个用以向后兼容gradle的工具，下载最新gradle版本方便使用），它是Androidstudio构建工程时自动创建的。
其实也是个shell脚本：
APP_HOME="`pwd -P`"
CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
#exec java -Xdock:name=Gradle -Xdock:icon=/Users/pro/media/gradle.icns -Dorg.gradle.appname=gradlew -classpath /Users/pro/gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain build
#gradle wrapper的跨平台是通过在核心的jar上外包一层脚本，最终其实也就是调用java 应用路径/gradle/wrapper/gradle-wrapper.jar，并指定了main为org.gradle.wrapper.GradleWrapperMain，因为java支持多个main。
 + 传给 ./gradlew的其他参数

gradle-wrapper.jar就是gradle（java书写）构建工具本身。主要是下载gradle，和运行gradle命令。通过编写一个名为build.gradle的脚本文件对项目进行设置，再根据这个脚本对项目进行构建（复杂的项目也有其他文件）

项目中一般会出现2个/多个build.gradle 文件，一个在根目录下，一个在app 目录下。
 根目录下的 build.gradle
　　1） repositories 闭包，声明了 jcenter() 的配置；
　　2） dependencies 闭包，声明了一个 Gradle 插件。

 
利用apply from: 'xx.gradle'这样的语句，就可以引入其他gradle文件了

----------------
Configurations
在Gradle中，依赖都被会分配到某一个具体的configuration中（获取翻译成布局、分组更适合）。Configuration代表着一个或多个构件及构件所需依赖的一个分组。
configurations {
    provided
}

maven中值为provided的scope，可以让我们声明一个只在编译时使用的非传递性的依赖。在gradle中provided，是提供给那些只编译不打包场景的命令。


可以在ext属性的map中放字符串或者基本数据类型
java-sdk-common\java_sdk\dependencies_warehouse.gradle
ext.versions = [
        navKit: '2.94.625345',
		...
]
		
ext.libraries = [
        navKit: "telenav:NavKit:${versions.navKit}",  //即为 telenav:NavKit:2.94.625345
		navkitScoutFoundation  : "telenav:ScoutFoundation:$versions.navkitScoutFoundation", //即为 telenav:ScoutFoundation:1.7.11
		...
]

java-sdk-common\java_sdk\build.gradle
apply from: 'dependencies_warehouse.gradle'

java-sdk-common\java_sdk\arp-sdk
apply from: 'tn_dependencies.gradle'

--------------------
flavor旨在创建不同的产品风味(app或者仅仅是个lib 包都可以)，并为不同产品分配专有属性
flavor在配置不同产品时，productFlavors 设置的不同环境包名会覆盖 defaultConfig 里面的设置的包名。
flavorDimensions "SDK" //用flavorDimensions属性来创建一个“模式”风味维度，维度来区分不同的类型，比如这里是“SDK”，还有“dev”“app”等
productFlavors {
	navkit {
		dimension "SDK"
	}
}

此外，还可以设置不同的产品引入不同的包
使用方式：产品名Compile “xxx.xxx.xx”
dependencies对于Android开发人员来说，并不陌生， 它是用来配置当项目的依赖项，接收的是一个DependencyHandler的闭包。

其中使用闭包XXXcompile
使用compile方式依赖的库将会参与编译和打包
从依赖上讲，用compile修饰的配置会传递依赖，而大多数的依赖冲突都是由compile产生的，什么是传递依赖？
打个比方：我们现在有libA，然后libB用compile依赖libA，最后libC依赖libB。那这个时候，libC自然能够使用libA的内容，因为libA的内容跟随这个libB而传递到了libC中。

或者用implementation
implementation 是Gradle4.1(Android studio3.0)新增的依赖方式，implementation和compile不同，该依赖方式不会产生传递依赖，implementation有点像provided和、debugCompile和releaseCompile的集合体。
来个具体场景，例如：有libA公共库，libB通过implementation依赖libB，然后app无论通过什么方式依赖libB，lib1的依赖都不会传递过来，必须要在app中重新依赖一次。

java-sdk-common\java_sdk\arp-sdk\tn_dependencies.gradle：
navkitCompile fileTree(include: ['*.jar', '*.aar'], dir: 'navkitLibs') //将libs目录下所有jar文件进行编译并打包

navkitCompile(libraries.hybridSearch) {
	exclude(group: 'com.github.davidmoten', module: 'geo') //导入第三方库时，如该库本身也导入了和我们主工程一样的库，就会报错，因此要排除重复的库
}
		
navkitCompile(libraries.navKit) {
	transitive = false
}

navkitCompile(libraries.mapEngine) {
	transitive = false//Transitive用于自动处理子依赖项。默认为true，gradle自动添加子依赖项，形成一个多层树形结构；设置为false，则需要手动添加每个依赖项。
}

Gradle Plugin的作用：
模块化构建脚本的功能
公共的功能可以抽取出来成为插件，可以供多个 build.gradle 使用，增加复用性